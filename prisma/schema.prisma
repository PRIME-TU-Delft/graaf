generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MARK: BEGIN AUTH THINGS

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  role          UserRole  @default(USER)
  nickname      String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  program_editors Program[] @relation("ProgramEditorRelation")
  program_admins  Program[] @relation("ProgramAdminRelation")
  course_editors  Course[]  @relation("CourseEditorRelation")
  course_admins   Course[]  @relation("CourseAdminRelation")
  pinned_courses  Course[]  @relation("PinnedCourse")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// MARK: END AUTH THINGS 

model Program {
  id   Int    @id @default(autoincrement())
  name String

  courses Course[] @relation("ProgramCourse")
  editors User[]   @relation("ProgramEditorRelation")
  admins  User[]   @relation("ProgramAdminRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CourseType {
  COURSE
  SANDBOX
}

model Course {
  id         Int        @id @default(autoincrement())
  code       String     @unique
  type       CourseType @default(COURSE)
  name       String
  isArchived Boolean    @default(false)

  programs Program[] @relation("ProgramCourse")
  graphs   Graph[]   @relation("CourseGraph")
  editors  User[]    @relation("CourseEditorRelation")
  admins   User[]    @relation("CourseAdminRelation")
  pinnedBy User[]    @relation("PinnedCourse")
  links    Link[]    @relation("CourseLink")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Link {
  id       Int    @id @default(autoincrement())
  name     String
  graphId  Int
  courseId Int

  graph  Graph  @relation("GraphLink", fields: [graphId], references: [id], onDelete: Cascade)
  course Course @relation("CourseLink", fields: [courseId], references: [id])

  @@unique([courseId, name])
}

model Graph {
  id        Int     @id @default(autoincrement())
  name      String
  courseId  Int
  isVisible Boolean @default(false)

  course   Course    @relation("CourseGraph", fields: [courseId], references: [id])
  domains  Domain[]  @relation("GraphDomain")
  subjects Subject[] @relation("GraphSubject")
  lectures Lecture[] @relation("GraphLecture")
  links    Link[]    @relation("GraphLink")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, name])
}

enum DomainStyle {
  PROSPEROUS_RED
  ENERGIZING_ORANGE
  SUNNY_YELLOW
  ELECTRIC_GREEN
  CONFIDENT_TURQUOISE
  MYSTERIOUS_BLUE
  MAJESTIC_PURPLE
  POWERFUL_PINK
  NEUTRAL_GRAY
  SERIOUS_BROWN
}

model Domain {
  id      Int          @id @default(autoincrement())
  name    String
  style   DomainStyle?
  order   Int // Domains is a SORTABLE ARRAY this order makes sure this order is perserved on reload
  x       Int          @default(0)
  y       Int          @default(0)
  graphId Int

  graph         Graph     @relation("GraphDomain", fields: [graphId], references: [id], onDelete: Cascade)
  subjects      Subject[] @relation("DomainSubject")
  sourceDomains Domain[]  @relation("DomainRelation")
  targetDomains Domain[]  @relation("DomainRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id       Int    @id @default(autoincrement())
  name     String @default("")
  order    Int // Subjects is a SORTABLE ARRAY this order makes sure this order is perserved on reload
  x        Int    @default(0)
  y        Int    @default(0)
  graphId  Int
  domainId Int?

  graph          Graph     @relation("GraphSubject", fields: [graphId], references: [id], onDelete: Cascade)
  domain         Domain?   @relation("DomainSubject", fields: [domainId], references: [id])
  lectures       Lecture[] @relation("LectureSubject")
  sourceSubjects Subject[] @relation("SubjectRelation")
  targetSubjects Subject[] @relation("SubjectRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lecture {
  id      Int    @id @default(autoincrement())
  name    String @default("")
  order   Int
  graphId Int

  graph    Graph     @relation("GraphLecture", fields: [graphId], references: [id], onDelete: Cascade)
  subjects Subject[] @relation("LectureSubject")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, graphId])
}
