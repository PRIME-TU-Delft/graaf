generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

// MARK: BEGIN AUTH THINGS

enum UserRole {
	USER
	ADMIN
}

model User {
	id            String    @id @default(cuid())
	role          UserRole  @default(USER)
	nickname      String?
	firstName     String?
	lastName      String?
	email         String    @unique
	emailVerified DateTime?
	image         String?

	accounts Account[]
	sessions Session[]

	sandboxes       Sandbox[] @relation("SandboxOwner")   // Sandboxes that this user owns
	sandbox_editors Sandbox[] @relation("SandboxEditor")  // Sandboxes that this user is an editor of (not owner)
	program_editors Program[] @relation("ProgramEditor")  // Programs that this user is an editor of
	program_admins  Program[] @relation("ProgramAdmin")   // Programs that this user is an admin of
	course_editors  Course[]  @relation("CourseEditor")   // Courses that this user is an editor of
	course_admins   Course[]  @relation("CourseAdmin")    // Courses that this user is an admin of
	pinned_courses  Course[]  @relation("PinnedCourse")   // Courses that this user has pinned

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Account {
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String?
	access_token      String?
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String?
	session_state     String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	@@id([provider, providerAccountId])
}

model Session {
	sessionToken String   @unique
	userId       String
	expires      DateTime
	user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model VerificationToken {
	identifier String
	token      String
	expires    DateTime

	@@id([identifier, token])
}

// MARK: END AUTH THINGS 

model Program {
	id   Int    @id @default(autoincrement())
	name String

	courses Course[] @relation("ProgramCourse")
	editors User[]   @relation("ProgramEditor")
	admins  User[]   @relation("ProgramAdmin")

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Course {
	id         Int     @id @default(autoincrement())
	code       String  @unique
	name       String
	isArchived Boolean @default(false)

	programs Program[] @relation("ProgramCourse")
	graphs   Graph[]   @relation("CourseGraph")
	editors  User[]    @relation("CourseEditor")
	admins   User[]    @relation("CourseAdmin")
	pinnedBy User[]    @relation("PinnedCourse")
	links    Link[]    @relation("CourseLink")

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Sandbox {
	id   Int    @id @default(autoincrement())
	name String

	owner   User    @relation("SandboxOwner", fields: [ownerId], references: [id], onDelete: Cascade)
	editors User[]  @relation("SandboxEditor")
	graphs  Graph[] @relation("SandboxGraph")
	links   Link[]  @relation("SandboxLink")

	ownerId String

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

enum ParentType {
	COURSE
	SANDBOX
}

model Link {
	id         Int     @id @default(autoincrement())
	name       String
	isArchived Boolean @default(false)

	course  Course?  @relation("CourseLink", fields: [courseId], references: [id])
	sandbox Sandbox? @relation("SandboxLink", fields: [sandboxId], references: [id])
	graph   Graph    @relation("GraphLink", fields: [graphId], references: [id], onDelete: Cascade)
  
	parentType ParentType
	courseId  Int?
	sandboxId Int?
	graphId   Int

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	@@unique([courseId, name])
}

model Graph {
	id   Int    @id @default(autoincrement())
	name String

	course  Course?    @relation("CourseGraph", fields: [courseId], references: [id], onDelete: Cascade)
	sandbox Sandbox?   @relation("SandboxGraph", fields: [sandboxId], references: [id], onDelete: Cascade)
	domains  Domain[]  @relation("GraphDomain")
	subjects Subject[] @relation("GraphSubject")
	lectures Lecture[] @relation("GraphLecture")
	links    Link[]    @relation("GraphLink")

	parentType ParentType
	courseId   Int?
	sandboxId  Int?
	
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	@@unique([courseId, sandboxId, name])
}

enum DomainStyle {
	PROSPEROUS_RED
	ENERGIZING_ORANGE
	SUNNY_YELLOW
	ELECTRIC_GREEN
	CONFIDENT_TURQUOISE
	MYSTERIOUS_BLUE
	MAJESTIC_PURPLE
	POWERFUL_PINK
	NEUTRAL_GRAY
	SERIOUS_BROWN
}

model Domain {
	id      Int          @id @default(autoincrement())
	name    String
	style   DomainStyle?
	order   Int // Domains is a SORTABLE ARRAY this order makes sure this order is perserved on reload
	x       Int          @default(0)
	y       Int          @default(0)
	graphId Int

	graph         Graph     @relation("GraphDomain", fields: [graphId], references: [id], onDelete: Cascade)
	subjects      Subject[] @relation("DomainSubject")
	sourceDomains Domain[]  @relation("DomainRelation")
	targetDomains Domain[]  @relation("DomainRelation")

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Subject {
	id       Int    @id @default(autoincrement())
	name     String @default("")
	order    Int // Subjects is a SORTABLE ARRAY this order makes sure this order is perserved on reload
	x        Int    @default(0)
	y        Int    @default(0)
	graphId  Int
	domainId Int?

	graph          Graph     @relation("GraphSubject", fields: [graphId], references: [id], onDelete: Cascade)
	domain         Domain?   @relation("DomainSubject", fields: [domainId], references: [id])
	lectures       Lecture[] @relation("LectureSubject")
	sourceSubjects Subject[] @relation("SubjectRelation")
	targetSubjects Subject[] @relation("SubjectRelation")

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Lecture {
	id      Int    @id @default(autoincrement())
	name    String @default("")
	order   Int
	graphId Int

	graph    Graph     @relation("GraphLecture", fields: [graphId], references: [id], onDelete: Cascade)
	subjects Subject[] @relation("LectureSubject")

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
